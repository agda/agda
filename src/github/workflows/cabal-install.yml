# This workflow tests whether we can build Agda from the sdist tarball.

name: Install (v2-cabal)

on:
  push:
    branches:
    - master
    - ci-*
    - release*
    paths: &trigger_path_list
    - '.github/workflows/cabal-install.yml'
    - 'Agda.cabal'
    - 'Setup.hs'
    - 'src/full/**'
    - 'src/main/**'
  pull_request:
    paths: *trigger_path_list

defaults:
  run:
    shell: bash

jobs:
  auto-cancel:
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && !contains(github.event.head_commit.message, '[github skip]')
      && !contains(github.event.head_commit.message, '[skip github]')
    runs-on: ubuntu-latest # Required, but it can be anything here.

    steps:
    - uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}

  cabal-install:
    needs: auto-cancel

    timeout-minutes: 60

    name: cabal install ${{ matrix.name }}
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        include:
        # OBS: name also used in conditional below
        - name:  ""
          install_flags: ""
        - name:  "--lib"
          install_flags: "--lib"

    env:
      FLAGS: "-O0 -f enable-cluster-counting"

    steps:
    - uses: actions/checkout@v4

    - uses: haskell-actions/setup@v2
      id: setup-haskell
      with:
        ghc-version:   '9.10'
        cabal-version: latest
        cabal-update:  true

    - name: Configure the build plan
      run: |
        cabal configure ${FLAGS}
        cabal build --dry-run
      # cabal build --dry-run creates dist-newstyle/cache/plan.json

    - name: Restore cached dependencies
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: cabal-install.yml-${{ runner.os }}-ghc-${{ steps.setup-haskell.outputs.ghc-version }}-cabal-${{ steps.setup-haskell.outputs.cabal-version }}
      with:
        path: &cache_path ${{ steps.setup-haskell.outputs.cabal-store }}
        # The file `plan.json` contains the build information.
        key:          ${{ env.key }}-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      # Since we save the cache even when building failed, it may be incomplete.
      # Thus, do not skip this step:
      # if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cabal build --only-dependencies

    - name: Install Agda
      run: |
        cabal install ${FLAGS} ${{ matrix.install_flags }}

    - name: Debug
      if: matrix.name != '--lib'
      run: |
        echo "PATH = ${PATH}"
        ls -l ~/.cabal/bin
        tree -L 3 ~/.cabal/store

    - name: Check for Agda library interface files
      if: matrix.name != '--lib'
      run: |
        AGDA_VERSION=$(agda --numeric-version)
        AGDA_DATA_DIR=$(agda --print-agda-data-dir)
        echo "AGDA_VERSION  = ${AGDA_VERSION}"
        echo "AGDA_DATA_DIR = ${AGDA_DATA_DIR}"
        ls -l "${AGDA_DATA_DIR}/lib/prim/_build/${AGDA_VERSION}/agda/Agda/Primitive.agdai"

    - name: Save cache
      uses: actions/cache/save@v4
      if:   always() && steps.cache.outputs.cache-hit != 'true'
            # save cache even when build fails
      with:
        key:  ${{ steps.cache.outputs.cache-primary-key }}
        path: *cache_path
