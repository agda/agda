# This workflow tests whether we can build Agda from the sdist tarball.

name: Install (v2-cabal)

on:
  push:
    branches:
    - master
    - ci-*
    - release*
    paths: &trigger_path_list
    - '.github/workflows/cabal-install.yml'
    - 'Agda.cabal'
    - 'src/full/**'
    - 'src/main/**'
  pull_request:
    paths: *trigger_path_list

defaults:
  run:
    shell: bash

jobs:
  auto-cancel:
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && !contains(github.event.head_commit.message, '[github skip]')
      && !contains(github.event.head_commit.message, '[skip github]')
    runs-on: ubuntu-latest # Required, but it can be anything here.

    steps:
    - uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}

  cabal-install:
    needs: auto-cancel

    timeout-minutes: 60

    name: ${{ matrix.os }} dyn ${{ matrix.dynamic }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        ghc-ver: ['9.10.1']
        cabal-ver: ['3.12.1.0']
        # Issue #7163: does install work with dynamic linking?
        dynamic:
          - no
          - cabal-config
          - command-line

    env:
      FLAGS: "-O0"

    steps:
    - uses: actions/checkout@v4

    - uses: haskell-actions/setup@v2
      id: setup-haskell
      with:
        ghc-version:   ${{ matrix.ghc-ver }}
        cabal-version: ${{ matrix.cabal-ver }}
        cabal-update:  true

    # # 2023-08-21: skipping setup does not work out of the box
    # # since then cabal uses the XDG directory structure.
    # # In particular, the ~/.cabal/store is somewhere else.
    # # A workaround is to create the .cabal directory.
    # # In case we switch to XDG we need to reset the cache then so cabal does not get
    # # confused if there is both the restored .cabal/store and the XDG store.

    # - name: Set up cabal
    #   run: |
    #     mkdir -p ~/.cabal
    #     cabal update

    - name: Environment settings based on the Haskell setup
      run: |
        GHC_VER=$(ghc --numeric-version)
        CABAL_VER=$(cabal --numeric-version)
        echo "GHC_VER   = ${GHC_VER}"
        echo "CABAL_VER = ${CABAL_VER}"
        echo "PATH      = ${PATH}"
        echo "GHC_VER=${GHC_VER}"       >> "${GITHUB_ENV}"
        echo "CABAL_VER=${CABAL_VER}"   >> "${GITHUB_ENV}"

    - name: Augment cabal config with executable-dynamic
      if: matrix.dynamic == 'cabal-config'
      run: |
        cabal user-config update --augment="executable-dynamic: True"

    - name: Cabal config with --enable-executable-dynamic
      if: matrix.dynamic == 'command-line'
      run: |
        echo "LFLAGS=--enable-executable-dynamic" >> "${GITHUB_ENV}"

    - name: Cabal flag enable-cluster-counting
      if: runner.os != 'Windows'
      run: |
        echo "CFLAGS=-f enable-cluster-counting"  >> "${GITHUB_ENV}"

    - name: Configure the build plan
      run: |
        cabal configure ${FLAGS} ${CFLAGS} ${LFLAGS}
        cabal build --dry-run
      # cabal build --dry-run creates dist-newstyle/cache/plan.json

    - name: Restore cached dependencies
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: cabal-install.yml-${{ runner.os }}-ghc-${{ env.GHC_VER }}-cabal-${{ env.CABAL_VER }}-dynamic-${{ matrix.dynamic }}
      with:
        path: &cache_path ${{ steps.setup-haskell.outputs.cabal-store }}
        # The file `plan.json` contains the build information.
        key:          ${{ env.key }}-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      # Since we save the cache even when building failed, it may be incomplete.
      # Thus, do not skip this step:
      # if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cabal build --only-dependencies

    - name: Install Agda
      run: |
        # shellcheck disable=SC2086
        cabal install ${FLAGS} ${CFLAGS} ${LFLAGS}

    - name: Agda version
      run: |
        agda --version

    - name: Check agda for dynamic libraries (macOS)
      if: runner.os == 'macOS'
      run: |
        otool -L "$(which agda)"

    - name: Check agda for dynamic libraries (Linux)
      if: runner.os == 'Linux'
      run: |
        ldd "$(which agda)"

    - name: Save cache
      uses: actions/cache/save@v4
      if:   always() && steps.cache.outputs.cache-hit != 'true'
            # save cache even when build fails
      with:
        key:  ${{ steps.cache.outputs.cache-primary-key }}
        path: *cache_path
