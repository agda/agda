# This workflow tests whether we can build Agda from the sdist tarball.

name: Install (v2-cabal)

on:
  push:
    branches:
    - master
    - ci-*
    - release*
    paths: &trigger_path_list
    - '.github/workflows/cabal-install.yml'
    - 'Agda.cabal'
    - 'Setup.hs'
    - 'src/full/**'
    - 'src/main/**'
  pull_request:
    paths: *trigger_path_list

defaults:
  run:
    shell: bash

jobs:
  auto-cancel:
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && !contains(github.event.head_commit.message, '[github skip]')
      && !contains(github.event.head_commit.message, '[skip github]')
    runs-on: ubuntu-latest # Required, but it can be anything here.

    steps:
    - uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}

  cabal-install:
    needs: auto-cancel

    timeout-minutes: 60

    runs-on: ubuntu-latest
    ## Use preinstalled GHC and Cabal
    #
    # runs-on: ${{ matrix.os }}
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     os:
    #       - ubuntu-latest
    #     ghc-ver: ['9.8.1']
    #     cabal-ver: ['3.10.1.0']
    #     # Use the versions preinstalled in the virtual environment, if possible.

    env:
      FLAGS: "-O0 -f enable-cluster-counting"

    steps:
    - uses: actions/checkout@v4

    ## Disable the setup action: Use preinstalled GHC and Cabal.
    ##
    ## In case the ubuntu-22.04 environment moves GHC beyond
    ## what Agda supports, bring back the setup action.
    # - uses: haskell-actions/setup@v2
    #   id: setup-haskell
    #   with:
    #     ghc-version:   ${{ matrix.ghc-ver }}
    #     cabal-version: ${{ matrix.cabal-ver }}
    #     cabal-update:  true

    # 2023-08-21: skipping setup does no work out of the box
    # since then cabal uses the XDG directory structure.
    # In particular, the ~/.cabal/store is somewhere else.
    # A workaround is to create the .cabal directory.
    # In case we switch to XDG we need to reset the cache then so cabal does not get
    # confused if there is both the restored .cabal/store and the XDG store.

    - name: Set up cabal
      run: |
        mkdir -p ~/.cabal
        cabal update

    - name: Environment settings based on the Haskell setup
      run: |
        GHC_VER=$(ghc --numeric-version)
        CABAL_VER=$(cabal --numeric-version)
        echo "GHC_VER   = ${GHC_VER}"
        echo "CABAL_VER = ${CABAL_VER}"
        echo "GHC_VER=${GHC_VER}"       >> ${GITHUB_ENV}
        echo "CABAL_VER=${CABAL_VER}"   >> ${GITHUB_ENV}

    - name: Configure the build plan
      run: |
        cabal configure ${FLAGS}
        cabal build --dry-run
      # cabal build --dry-run creates dist-newstyle/cache/plan.json

    - name: Restore cached dependencies
      uses: actions/cache/restore@v4
      id: cache
      env:
        key: cabal-install.yml-${{ runner.os }}-ghc-${{ env.GHC_VER }}-cabal-${{ env.CABAL_VER }}
      with:
        path: &cache_path ~/.cabal/store
        # ${{ steps.setup-haskell.outputs.cabal-store }}
        # The file `plan.json` contains the build information.
        key:          ${{ env.key }}-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}-

    - name: Install dependencies
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        cabal build --only-dependencies

    - name: Install Agda
      run: |
        cabal install ${FLAGS}

    - name: Save cache
      uses: actions/cache/save@v4
      if:   ${{ always() && (steps.cache.outputs.cache-hit != 'true') }}
            # save cache even when build fails
      with:
        key:  ${{ steps.cache.outputs.cache-primary-key }}
        path: *cache_path
