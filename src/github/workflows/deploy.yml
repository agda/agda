name: Deploy

on:
  push:
    tags:
      - v[2-9]+.*

  workflow_run:
    workflows: ["Build, Test, and Benchmark"]
    branches: [master]
    types:
      - completed

  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  auto-cancel:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: Ubuntu-latest
    steps:
    - uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}

  build:
    if: ${{ !cancelled() }}
    needs: auto-cancel
    strategy:
      fail-fast: false
      matrix:
        # Andreas, 2022-10-18
        # We stick to '-latest' virtual environments here in the sense of
        # "most canonical", since this is the deploy action.
        # As of today (2024-02-05), the actual version information can be found in
        # https://github.com/actions/runner-images#available-images
        os: [windows-latest, macos-latest, ubuntu-latest]
        ghc-ver: ['9.10']
        cabal-ver: [latest]

    env:
      ARGS: "--disable-executable-profiling --disable-library-profiling"
      # Liang-Ting Chen (2021-01-01):
      # Cabal cannot compile statically with text-icu (required by the flag `enable-cluster-counting`),
      # see https://github.com/4e6/text-icu-static-example
      #
      # ASR (2022-06-01): The flag `--enable-split-sections` generates the warning
      # "-split-sections is not useful on this platform since it always uses subsections via symbols"
      # on MacOS (Issue #5940).
      LINUX_ARGS: "--enable-executable-static  --enable-split-sections"
      MACOS_ARGS: "--flags=enable-cluster-counting"
      WIN64_ARGS: "--flags=enable-cluster-counting  --enable-split-sections"
    outputs:
      sha: ${{ steps.vars.outputs.sha }}
    runs-on: ${{ matrix.os }}
    steps:

    - name: Check out the master branch
      uses: actions/checkout@v4

    - name: Set up platform-dependent variables
      id: vars
      run: |
        sha="$(git rev-parse --short=7 HEAD)"

        if [[ "$GITHUB_REF" == "refs/tags/"* ]]; then
          suffix=${GITHUB_REF_NAME}
        else
          suffix=nightly-${sha}
        fi

        bindist=Agda-${suffix}

        echo sha="${sha}"                                           >> "${GITHUB_OUTPUT}"
        echo bindist="${bindist}"                                   >> "${GITHUB_OUTPUT}"

        if [[ "$OSTYPE" == "msys"* ]]; then

          filename="${bindist}-win64.zip"
          echo args="${ARGS} ${WIN64_ARGS}"                         >> "${GITHUB_OUTPUT}"
          echo compress-cmd="7z a ${filename} ${bindist} -bb -mx=9" >> "${GITHUB_OUTPUT}"
          echo content-type="application/zip"                       >> "${GITHUB_OUTPUT}"
          echo exe="agda.exe"                                       >> "${GITHUB_OUTPUT}"
          echo filename="${filename}"                               >> "${GITHUB_OUTPUT}"

        elif [[ "$OSTYPE" == "darwin"* ]]; then

          filename="${bindist}-macOS.tar.xz"
          echo args="${ARGS} ${MACOS_ARGS}"                         >> "${GITHUB_OUTPUT}"
          echo compress-cmd="tar -a -cvf ${filename} ${bindist}"    >> "${GITHUB_OUTPUT}"
          echo content-type="application/x-xz"                      >> "${GITHUB_OUTPUT}"
          echo exe="agda"                                           >> "${GITHUB_OUTPUT}"
          echo filename="${filename}"                               >> "${GITHUB_OUTPUT}"

        elif [[ "$OSTYPE" == "linux-gnu"* ]]; then

          filename="${bindist}-linux.tar.xz"
          echo args="${ARGS} ${LINUX_ARGS}"                         >> "${GITHUB_OUTPUT}"
          echo compress-cmd="tar -a -cvf ${filename} ${bindist}"    >> "${GITHUB_OUTPUT}"
          echo content-type="application/x-xz"                      >> "${GITHUB_OUTPUT}"
          echo exe="agda"                                           >> "${GITHUB_OUTPUT}"
          echo filename="${filename}"                               >> "${GITHUB_OUTPUT}"

        fi

    - name: Display build variables
      run: |
        echo "GITHUB_REF      = ${GITHUB_REF}"
        echo "GITHUB_REF_NAME = ${GITHUB_REF_NAME}"

        echo "args            = ${{ steps.vars.outputs.args         }}"
        echo "compress-cmd    = ${{ steps.vars.outputs.compress-cmd }}"
        echo "content-type    = ${{ steps.vars.outputs.content-type }}"
        echo "filename        = ${{ steps.vars.outputs.filename     }}"
        echo "bindist         = ${{ steps.vars.outputs.bindist      }}"

    - name: Set up Alpine Linux with GHC and the static library for ICU
      uses: jirutka/setup-alpine@v1
      if:  ${{ runner.os == 'Linux' }}
      with:
        packages: >
          cabal
          g++
          gcc
          icu-static
          ncurses-dev
          ncurses-static
          musl-dev
          zlib-static
          zlib-dev

    - uses: haskell-actions/setup@v2
      id: setup-haskell
      if:  ${{ runner.os != 'Linux' }}
      with:
        ghc-version: ${{ matrix.ghc-ver }}
        cabal-version: ${{ matrix.cabal-ver }}

    - name: Environment settings based on the Haskell setup
      run: |
        GHC_VER=$(ghc --numeric-version)
        CABAL_VER=$(cabal --numeric-version)
        echo "GHC_VER   = ${GHC_VER}"
        echo "CABAL_VER = ${CABAL_VER}"
        echo "GHC_VER=${GHC_VER}"       >> "${GITHUB_ENV}"
        echo "CABAL_VER=${CABAL_VER}"   >> "${GITHUB_ENV}"
      # From now on, env.{GHC|CABAL}_VER are the precise versions.

    # See: https://github.com/haskell/text-icu/pull/86
    # pacman needs MSYS /usr/bin in PATH, but this breaks the latest cache action.
    # -  https://github.com/actions/cache/issues/1073
    # MSYS' pkg-config needs MSYS /mingw64/bin which we can safely add to the PATH

    - name: Install the required packages (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: |
        $env:PATH = "C:\msys64\usr\bin;$env:PATH"
        pacman -v --noconfirm -S mingw-w64-x86_64-pkgconf mingw-w64-x86_64-icu mingw-w64-x86_64-binutils
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath "$env:GITHUB_PATH" -Append

      ## Old method:
      # env:
      #   ICU_URL: 'https://github.com/unicode-org/icu/releases/download/release-69-1/icu4c-69_1-Win64-MSVC2019.zip'
      #   ICU_DIR: '/c/icu4c'
      #   ICU_FILE: 'icu4c.zip'
      # run: |
      #   curl -sSLo ${ICU_FILE} ${ICU_URL}
      #   7z e ${ICU_FILE} -o${ICU_DIR} && rm ${ICU_FILE}
      #   mkdir -p ${ICU_DIR}/include/unicode && mv ${ICU_DIR}/*.h ${ICU_DIR}/include/unicode

      #   cabal user-config update --augment="extra-lib-dirs: $(cygpath -w ${ICU_DIR})" --augment="extra-include-dirs: $(cygpath -w ${ICU_DIR}/include)"

    - name: Set up for the ICU library (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        ICU4C=$(brew --prefix)/opt/icu4c
        # echo "${ICU4C}/bin" >> "${GITHUB_PATH}" ## Only needed for uconv
        ICU_DIR=${ICU4C}/lib
        echo "ICU_DIR=${ICU_DIR}"
        echo "ICU_DIR=${ICU_DIR}" >> "${GITHUB_ENV}"
        echo "PKG_CONFIG_PATH=${ICU_DIR}/pkgconfig" >> "${GITHUB_ENV}"

    - name: Determine the ICU version
      run: |
        ICU_VER=$(pkg-config --modversion icu-i18n)
        echo "ICU_VER=${ICU_VER}"
        echo "ICU_VER=${ICU_VER}" >> "${GITHUB_ENV}"
        ICU_MAJOR_VER=$(cut -d '.' -f 1 <<< "${ICU_VER}")
        echo "ICU_MAJOR_VER=${ICU_MAJOR_VER}"
        echo "ICU_MAJOR_VER=${ICU_MAJOR_VER}" >> "${GITHUB_ENV}"
      # The output of unconv --version looks like "uconv v2.1  ICU 72.1" from which we extract "72.1"

    - name: Configure the build plan
      if: ${{ runner.os != 'Linux' }}
      run: |
        cabal configure ${{ steps.vars.outputs.args }}
        cabal build --dry-run
      # cabal build --dry-run creates dist-newstyle/cache/plan.json

    - name: Cache dependencies
      uses: actions/cache@v4
      if: ${{ runner.os != 'Linux' }}
      id: cache
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key:          deploy.yml-${{ runner.os }}-ghc-${{ env.GHC_VER }}-cabal-${{ env.CABAL_VER }}-${{ hashFiles('**/plan.json') }}
        restore-keys: deploy.yml-${{ runner.os }}-ghc-${{ env.GHC_VER }}-cabal-${{ env.CABAL_VER }}-

    - name: Build dependencies (on Alpine Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: "alpine.sh {0}"
      run: |
        cabal update # Liang-Ting, 2024-01-26: Alpine Linux has its own GHC toolchain
        cabal configure ${{ steps.vars.outputs.args }}
        cabal build exe:agda exe:agda-mode --only-dependencies

    - name: Build dependencies
      if: ${{ steps.cache.outputs.cache-hit != 'true' && runner.os != 'Linux' }}
      run: cabal build exe:agda exe:agda-mode --only-dependencies

    - name: Build Agda (on Alpine Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: "alpine.sh {0}"
      run: cabal build exe:agda exe:agda-mode

    - name: Build Agda
      if: ${{ runner.os != 'Linux' }}
      run: cabal build exe:agda exe:agda-mode

    - name: Move artefacts to ${{ steps.vars.outputs.bindist }}
      run: |
        bindist="${{ steps.vars.outputs.bindist }}"
        mkdir -p "${bindist}"/bin
        cp -a src/data "${bindist}"

        if [[ "$OSTYPE" == "msys"* ]]; then

          find dist-newstyle/build \( -name 'agda.exe' -o -name 'agda-mode.exe' \) -type f -exec cp {} "${bindist}"/bin \;
          cp -a .github/*.bat "${bindist}"
          cp /c/msys64/mingw64/bin/libicu*.dll "${bindist}"/bin/
          strip "${bindist}"/bin/*

        else

          find dist-newstyle/build \( -name 'agda' -o -name 'agda-mode' \) -type f -exec cp {} "${bindist}"/bin \;
          strip "${bindist}"/bin/*
          cp -a .github/*.sh "${bindist}"

          if [[ "$OSTYPE" == "darwin"* ]]; then

          # Change the path to the dynamic library icu4c to the run-time search path:
          #
          # 1. the same directory of executable, i.e. @executable_path
          # 2. @executable_path/../lib
          # 3. the default location of system-wide icu4c installed by homebrew, ie. /usr/local/opt/icu4c/lib
          #
          mkdir "${bindist}"/lib
          cp "${ICU_DIR}/libicuuc.${ICU_MAJOR_VER}.dylib" "${ICU_DIR}/libicui18n.${ICU_MAJOR_VER}.dylib" "${ICU_DIR}/libicudata.${ICU_MAJOR_VER}.dylib" "${bindist}"/lib
          install_name_tool -change "${ICU_DIR}/libicuuc.${ICU_MAJOR_VER}.dylib" "@rpath/libicuuc.${ICU_MAJOR_VER}.dylib" "${bindist}"/bin/agda
          install_name_tool -change "${ICU_DIR}/libicui18n.${ICU_MAJOR_VER}.dylib" "@rpath/libicui18n.${ICU_MAJOR_VER}.dylib" "${bindist}"/bin/agda
          install_name_tool -add_rpath @executable_path -add_rpath @executable_path/../lib -add_rpath "${ICU_DIR}" "${bindist}"/bin/agda
          otool -L "${bindist}"/bin/agda

          fi
        fi

        file "${{ steps.vars.outputs.bindist }}/bin/agda"

    - name: Display the version information
      run: |
        ${{ steps.vars.outputs.bindist }}/bin/agda --version

    - name: Pack artefacts
      run: |
        ${{ steps.vars.outputs.compress-cmd }}

    - uses: actions/upload-artifact@v4
      with:
        path: ${{ steps.vars.outputs.filename }}
        name: ${{ steps.vars.outputs.filename }}
        if-no-files-found: error
        retention-days: 3

  deploy: # release a bindist if triggered on master or by a tag }}
    # Andreas, 2023-02-13: Also run this part when manually triggered ('workflow_dispatch')
    # if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'workflow_run' }}
    needs: build
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    steps:

    - uses: actions/checkout@v4
      with:
        sparse-checkout: .

    - uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create/replace the nightly release and upload artifacts as release assets
      if: ${{ github.ref == 'refs/heads/master' }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release delete 'nightly' --repo ${GITHUB_REPOSITORY} --cleanup-tag --yes || true
        ls -R artifacts
        gh release create 'nightly' artifacts/**/* --repo ${GITHUB_REPOSITORY} --generate-notes --notes-start-tag v2.7.0 --prerelease --title "${{ needs.build.outputs.sha }}@master"

    - name: Create a release with the bindist as release assets
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "GITHUB_REF_NAME=${GITHUB_REF_NAME}"
        echo "GITHUB_REPOSITORY=${GITHUB_REPOSITORY}"

        gh release delete "${GITHUB_REF_NAME}" --repo ${GITHUB_REPOSITORY} --yes || true
        gh release create "${GITHUB_REF_NAME}" -d --notes-file CHANGELOG.md --title "${GITHUB_REF_NAME}"
        ls -R artifacts
        gh release upload "${GITHUB_REF_NAME}" artifacts/**/* --repo ${GITHUB_REPOSITORY}
