name: Build (stack)

on:
  push:
    branches:
    - master
    - ci-*
    - release*
    paths: &trigger_path_list
    - '.github/workflows/stack.yml'
    - 'Agda.cabal'
    - 'Setup.hs'
    - 'stack*.yaml'
    - 'src/agda-mode/**'
    - 'src/full/**'
    - 'src/main/**'
    - 'src/size-solver/**'
    - 'test/**.hs'
  pull_request:
    paths: *trigger_path_list

jobs:
  auto-cancel:
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && !contains(github.event.head_commit.message, '[github skip]')
      && !contains(github.event.head_commit.message, '[skip github]')

    runs-on: Ubuntu-latest # Required, but it can be anything here.

    steps:
    - uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}
  stack:
    needs: auto-cancel

    timeout-minutes: 60

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        stack-ver: ['2.9.1']
        ghc-ver: [9.4.3, 9.2.4, 9.0.2, 8.10.7, 8.8.4, 8.6.5, 8.4.4]
          # Andreas, 2022-03-26:
          # Note: ghc-ver needs to be spelled out with minor version, i.e., x.y.z
          # rather than x.y (which haskell-setup would resolve to a suitable .z)
          # because ghc-ver is to pick the stack-$(ghc-ver).yaml file.
          # If switching to a new GHC minor version needs manual action, i.e.,
          # adding the respective stack-x.y.z.yaml file.
        include:
          # Andreas, 2022-10-18
          # system-ghc installation of 8.0 and 8.2 fails on ubuntu-22.04
          # (maybe stack could install it).
          - os: ubuntu-20.04
            ghc-ver: 8.2.2
            stack-ver: '2.9.1'
          - os: ubuntu-20.04
            ghc-ver: 8.0.2
            stack-ver: '2.9.1'
          - os: macos-12
            ghc-ver: 9.4.3
            stack-ver: '2.9.1'
          # Andreas, 2022-10-06, issue #6128
          # The action stalls. Last message is "installing agda-mode in ...".
          # Happens on windows-2019 and windows-2022, with stack 2.7.5 and 2.9.1.
          # I have no clue what causes this.
          # Temporarily disable the windows build.
          - os: windows-2022
            ghc-ver: 9.4.2
            stack-ver: '2.9.1'
    # # Try "allowed-failure" for Windows with GHC 9.2
    # continue-on-error: ${{ startsWith(matrix.os, 'windows') && startsWith(matrix.ghc-ver,'9.2') }}
    env:
      ## ARGS is set later, depending on the actually picked GHC version
      # ARGS: "--stack-yaml=stack-${{ matrix.ghc-ver }}.yaml --no-terminal"
      EXTRA_ARGS: "--fast"
      NON_DEFAULT_FLAGS: "--flag Agda:enable-cluster-counting --flag Agda:cpphs --flag Agda:debug"

      # Liang-Ting Chen (2021-08-18):
      # Let pacman choose the file name for ICU4C.
      #
      # # The following is used by Windows only
      # ICU_FILE: "mingw-w64-x86_64-icu-68.2-3-any.pkg.tar.zst"
      # Amélia Liao (2022-08-16):
      # Use a known-good version of ICU from the msys2 repository since
      # GHC does not work with ICU ≠ 69
      ICU_URL: "https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-icu-69.1-1-any.pkg.tar.zst"

    # Need bash on Windows for piping and evaluation.
    defaults:
      run:
        shell: bash

    steps:

    # Checkout is needed before the first call to stack exec ${ARGS}
    # because it provides the stack-*.yaml file.
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - uses: haskell/actions/setup@v2
      id: haskell-setup
      with:
        ghc-version: ${{ matrix.ghc-ver }}
        stack-version: ${{ matrix.stack-ver }}
        enable-stack: true

    - name: Environment settings based on the Haskell setup
      run: |
        echo "runner.os         = ${{ runner.os                               }}"
        echo "OSTYPE            = ${{ env.OSTYPE                              }}"
        echo "ghc-path          = ${{ steps.haskell-setup.outputs.ghc-path    }}"
        echo "ghc-exe           = ${{ steps.haskell-setup.outputs.ghc-exe     }}"
        echo "cabal-path        = ${{ steps.haskell-setup.outputs.cabal-path  }}"
        echo "cabal-exe         = ${{ steps.haskell-setup.outputs.cabal-exe   }}"
        echo "cabal-store       = ${{ steps.haskell-setup.outputs.cabal-store }}"
        echo "stack-path        = ${{ steps.haskell-setup.outputs.stack-path  }}"
        echo "stack-exe         = ${{ steps.haskell-setup.outputs.stack-exe   }}"
        echo "stack-root        = ${{ steps.haskell-setup.outputs.stack-root  }}"
        echo "STACK_ROOT (orig) = ${{ env.STACK_ROOT                          }}"
        echo "STACK_ROOT=${{ steps.haskell-setup.outputs.stack-root }}" >> ${GITHUB_ENV}
        echo "STACK_VER=$(stack --numeric-version)"                     >> ${GITHUB_ENV}
        export GHC_VER=$(ghc --numeric-version)
        echo "GHC_VER=${GHC_VER}"                                       >> ${GITHUB_ENV}
        echo "ARGS=--stack-yaml=stack-${GHC_VER}.yaml --system-ghc --no-terminal"    >> ${GITHUB_ENV}
    # From now on, use env.GHC_VER rather than matrix.ghc-ver

    # In a second step we can inspect and use the GITHUB_ENV set in the previous step:
    - name: Environment (review)
      run: |
        echo "STACK_ROOT (fix)  = ${STACK_ROOT}"
        echo "STACK_VER         = ${STACK_VER}"
        echo "GHC_VER           = ${GHC_VER}"

    - uses: actions/cache@v3
      name: Cache dependencies
      id: cache
      with:
        path: ${{ steps.haskell-setup.outputs.stack-root }}
        # A unique cache is used for each stack.yaml.
        # Note that matrix.stack-ver might be simply 'latest', so we use STACK_VER.
        key: |
          ${{ runner.os }}-stack-20220503-${{ env.STACK_VER }}-${{ env.GHC_VER }}-${{ hashFiles(format('stack-{0}.yaml', env.GHC_VER)) }}

    - name: Set up pkg-config for the ICU library (macOS)
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: |
        echo "PKG_CONFIG_PATH=/usr/local/opt/icu4c/lib/pkgconfig" >> ${GITHUB_ENV}

    # # On ubuntu >= 20.04, ICU is already installed.
    # - name: Install the icu library (Ubuntu)
    #   if: ${{ matrix.os == 'ubuntu-18.04' }}
    #   run: |
    #     sudo apt-get update -qq
    #     sudo apt-get install libicu-dev -qq

    # Note that msys2 libraries have to be installed via
    #   stack exec ${ARGS} -- pacman ...
    # because stack comes with its own msys2 instance, see
    #   https://docs.haskellstack.org/en/stable/developing_on_windows/
    # NB: the ${ARGS} is necessary, otherwise stack installs another GHC...
    # Andreas, 2022-02-04, issue #5768:
    # To work around keyring problems, we update msys2-keyring before installing ICU.
    # Andreas, 2022-05-15, pr #5909: the keyring problem was solved upstream by
    # updating Stack-MSYS to 2022-05-03.
    #
    # Liang-Ting, 2022-06-30: Always update msys2-keyring in case it is broken upstream again.
    # Amélia, 2022-08-16: Download a good version of ICU
    - name: Install the icu library (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: |
        # stack exec ${ARGS} -- pacman --noconfirm -Syuu
        stack exec ${ARGS} -- pacman --noconfirm -Sy msys2-keyring
        stack exec ${ARGS} -- bash -c "curl -LO ${ICU_URL} && pacman --noconfirm -U *.pkg.tar.zst"
        stack exec ${ARGS} -- pacman --noconfirm -S mingw-w64-x86_64-pkg-config

    - name: Install the numa library (Ubuntu, GHC 8.4.4)
      if: ${{ runner.os == 'Linux' && env.GHC_VER == '8.4.4' }}
      run: |
        sudo apt-get install libnuma-dev -qq

    - name: Install dependencies for Agda and `agda-tests` (i.e. the test suite).
      if: ${{ !steps.cache.outputs.cache-hit }}
      run: stack build ${ARGS} ${EXTRA_ARGS} ${NON_DEFAULT_FLAGS} --test --only-dependencies

    - name: Build Agda with the default flags in Agda.cabal. Also build `agda-tests` (i.e. the test suite).
      run: stack build ${ARGS} ${EXTRA_ARGS} --test --no-run-tests

    - name: Build Agda with the non-default flags Agda.cabal.
      run: stack build ${ARGS} ${EXTRA_ARGS} ${NON_DEFAULT_FLAGS}
