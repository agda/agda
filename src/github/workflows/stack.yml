name: Build (stack)

on:
  push:
    branches:
    - master
    - ci-*
    - release*

    paths: &trigger_path_list
    - '.github/workflows/stack.yml'
    - 'Agda.cabal'
    - 'Setup.hs'
    - 'stack-*.yaml'
    - 'src/size-solver/size-solver.cabal'
    # Andreas, 2023-01-27, issue #8460:
    # Restrict this workflow to changes in the *.cabal and stack*.yaml files
    # - 'src/agda-mode/**'
    # - 'src/full/**'
    # - 'src/main/**'
    # - 'src/size-solver/**'
    # - 'test/**.hs'

  pull_request:
    paths: *trigger_path_list

  # Allow manual runs
  workflow_dispatch:

jobs:
  auto-cancel:
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && !contains(github.event.head_commit.message, '[github skip]')
      && !contains(github.event.head_commit.message, '[skip github]')

    runs-on: Ubuntu-latest # Required, but it can be anything here.

    steps:
    - uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}
  stack:
    needs: auto-cancel

    timeout-minutes: 60

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        ghc-ver: [9.10.1, 9.8.2, 9.6.6, 9.4.8, 9.2.8, 9.0.2, 8.10.7, 8.8.4]
          # Andreas, 2022-03-26:
          # Note: ghc-ver needs to be spelled out with minor version, i.e., x.y.z
          # rather than x.y (which haskell-setup would resolve to a suitable .z)
          # because ghc-ver is to pick the stack-$(ghc-ver).yaml file.
          # If switching to a new GHC minor version needs manual action, i.e.,
          # adding the respective stack-x.y.z.yaml file.
        include:
        - os: macos-14
          ghc-ver: 9.10.1
        - os: windows-2022
          ghc-ver: 9.10.1

    # # Try "allowed-failure" for Windows with GHC 9.2
    # continue-on-error: ${{ startsWith(matrix.os, 'windows') && startsWith(matrix.ghc-ver,'9.2') }}
    env:
      ## ARGS is set later, depending on the actually picked GHC version
      # ARGS: "--stack-yaml=stack-${{ matrix.ghc-ver }}.yaml --no-terminal"
      EXTRA_ARGS: "--fast"
      NON_DEFAULT_FLAGS: "--flag Agda:enable-cluster-counting --flag Agda:debug"

    # Need bash on Windows for piping and evaluation.
    defaults:
      run:
        shell: bash

    steps:

    # Checkout is needed before the first call to stack exec ${ARGS}
    # because it provides the stack-*.yaml file.
    - uses: actions/checkout@v4

    - uses: haskell-actions/setup@v2
      id: haskell-setup
      with:
        ghc-version: ${{ matrix.ghc-ver }}
        stack-version: latest
        enable-stack: true
        cabal-update: false

    - name: Environment settings based on the Haskell setup
      run: |
        echo "runner.os         = ${{ runner.os                               }}"
        echo "OSTYPE            = ${{ env.OSTYPE                              }}"
        echo "ghc-path          = ${{ steps.haskell-setup.outputs.ghc-path    }}"
        echo "ghc-exe           = ${{ steps.haskell-setup.outputs.ghc-exe     }}"
        echo "cabal-path        = ${{ steps.haskell-setup.outputs.cabal-path  }}"
        echo "cabal-exe         = ${{ steps.haskell-setup.outputs.cabal-exe   }}"
        echo "cabal-store       = ${{ steps.haskell-setup.outputs.cabal-store }}"
        echo "stack-path        = ${{ steps.haskell-setup.outputs.stack-path  }}"
        echo "stack-exe         = ${{ steps.haskell-setup.outputs.stack-exe   }}"
        echo "stack-root        = ${{ steps.haskell-setup.outputs.stack-root  }}"
        echo "STACK_ROOT (orig) = ${{ env.STACK_ROOT                          }}"
        echo "STACK_ROOT=${{ steps.haskell-setup.outputs.stack-root }}" >> "${GITHUB_ENV}"
        echo "STACK_VER=$(stack --numeric-version)"                     >> "${GITHUB_ENV}"
        GHC_VER=$(ghc --numeric-version)
        echo "GHC_VER=${GHC_VER}"                                       >> "${GITHUB_ENV}"
        echo "ARGS=--stack-yaml=stack-${GHC_VER}.yaml --system-ghc --no-terminal"    >> "${GITHUB_ENV}"
    # From now on, use env.GHC_VER rather than matrix.ghc-ver

    - name: Install the ICU library (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install icu4c
        ICU4C=$(brew --prefix)/opt/icu4c
        echo "PKG_CONFIG_PATH=${ICU4C}/lib/pkgconfig" >> "${GITHUB_ENV}"

    # Note that msys2 libraries have to be installed via
    #   stack exec ${ARGS} -- pacman ...
    # because stack comes with its own msys2 instance, see
    #   https://docs.haskellstack.org/en/stable/developing_on_windows/
    # NB: the ${ARGS} is necessary, otherwise stack installs another GHC...
    #
    # # Andreas, 2022-02-04, issue #5768:
    # # To work around keyring problems, we update msys2-keyring before installing ICU.
    # # Andreas, 2022-05-15, pr #5909: the keyring problem was solved upstream by
    # # updating Stack-MSYS to 2022-05-03.
    # #
    # # Liang-Ting, 2022-06-30: Always update msys2-keyring in case it is broken upstream again.
    # # Amélia, 2022-08-16: Download a good version of ICU

    - name: Install the ICU library (Windows)
      if: runner.os == 'Windows'
      run: |
        # stack exec ${ARGS} -- pacman --noconfirm -Syuu
        # stack exec ${ARGS} -- pacman --noconfirm -S msys2-keyring
        # stack exec ${ARGS} -- bash -c "curl -LO ${ICU_URL} && pacman --noconfirm -U *.pkg.tar.zst"
        stack exec ${ARGS} -- pacman --noconfirm -S mingw-w64-x86_64-icu
        stack exec ${ARGS} -- pacman --noconfirm -S mingw-w64-x86_64-pkgconf
        stack exec ${ARGS} -- pacman --noconfirm -S mingw-w64-x86_64-zlib
      # env:
      #   # Amélia Liao (2022-08-16):
      #   # Use a known-good version of ICU from the msys2 repository since
      #   # GHC does not work with ICU ≠ 69
      #   ICU_URL: "https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-icu-69.1-1-any.pkg.tar.zst"

    - name: Determine the ICU version
      run: |
        ICU_VER=$(stack exec ${ARGS} -- pkg-config --modversion icu-i18n)
        echo "ICU_VER=${ICU_VER}"
        echo "ICU_VER=${ICU_VER}" >> "${GITHUB_ENV}"

    - name: Environment (review)
      run: |
        echo "STACK_ROOT (fix)  = ${STACK_ROOT}"
        echo "STACK_VER         = ${STACK_VER}"
        echo "GHC_VER           = ${GHC_VER}"
        echo "ICU_VER           = ${ICU_VER}"

    - name: Restore cache from approximate key
      uses: actions/cache/restore@v4
      id:   cache
      env:
        key: stack.yml-${{ runner.os }}-ghc-${{ env.GHC_VER }}-stack-${{ env.STACK_VER }}-icu-${{ env.ICU_VER }}
        # We include stack-${GHC_VER}.yaml in the primary cache key so that the cache gets rewritten
        # everytime the resolver updates or extra-deps are added.
        # 2023-03-28: We also include Agda.cabal so that the cache gets rewritten if a new dependency is added.
      with:
        key: ${{ env.key }}-plan-${{ hashFiles('Agda.cabal', format('stack-{0}.yaml', env.GHC_VER)) }}
        restore-keys: ${{ env.key}}-
        path: &cache_pathes |
          ${{ env.STACK_ROOT }}
        # Andreas, 2023-01-23: caching the two work dirs balloons a cache entry from 300MB to 800MB,
        # which is more than we can tolerate with out total cache size of max 10GB.
          # .stack-work
          # .stack-work-fast

    - name: Install dependencies for Agda and `agda-tests` (i.e. the test suite).
      # Since we save the cache even when building failed, it may be incomplete.
      # Thus, do not skip this step:
      # if: steps.cache.outputs.cache-hit != 'true'
      run: stack build ${ARGS} ${EXTRA_ARGS} ${NON_DEFAULT_FLAGS} --test --only-dependencies

    - name: Build Agda with the default flags in Agda.cabal. Also build `agda-tests` (i.e. the test suite).
      run: stack build ${ARGS} ${EXTRA_ARGS} --test --no-run-tests
        ## Since we do not cache .stack-work and .stack-work-fast, we can fuse them.
      # run: stack build ${ARGS} ${EXTRA_ARGS} --work-dir=.stack-work-fast --test --no-run-tests

    - name: Build Agda with the non-default flags Agda.cabal.
      run: stack build ${ARGS} ${EXTRA_ARGS} ${NON_DEFAULT_FLAGS}

    - name: Save cache
      uses: actions/cache/save@v4
      if:   always() && steps.cache.outputs.cache-matched-key != steps.cache.outputs.cache-primary-key
            # save cache even when build fails
      with:
        key:  ${{ steps.cache.outputs.cache-primary-key }}
        path: *cache_pathes
