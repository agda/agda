name: Build (cabal)

on:
  push:
    branches:
    - master
    - ci-*
    - release*
    paths: &trigger_path_list
    - '.github/workflows/cabal.yml'
    - 'Agda.cabal'
    - 'Setup.hs'
    - 'src/agda-mode/**'
    - 'src/full/**'
    - 'src/main/**'
    - 'test/**.hs'
  pull_request:
    paths: *trigger_path_list

defaults:
  run:
    shell: bash

jobs:
  auto-cancel:
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && !contains(github.event.head_commit.message, '[github skip]')
      && !contains(github.event.head_commit.message, '[skip github]')
    runs-on: Ubuntu-latest # Required, but it can be anything here.

    steps:
    - uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

  cabal:
    needs: auto-cancel

    timeout-minutes: 60

    # In these fields, we cannot refer to `env` (or even `runner.os`).
    # Thus, we need redundant entries in the matrix.
    name: Cabal ${{ matrix.description }}, ${{ matrix.ghc-ver }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        description: [Linux]      ## This just for pretty-printing the job name.
        ghc-ver: [9.6.1, 9.4.4, 9.2.7, 9.0.2, 8.10.7, 8.8.4, 8.6.5]
        # Need to mention "cabal-ver" at least once in the matrix, otherwise matrix.cabal-ver is an actionlint error.
        cabal-ver: ['3.10']
        cabal-flags: ['--enable-tests -f enable-cluster-counting']
        include:
          ## Latest GHC, special builds

          # Linux, w/o tests
          - os: ubuntu-22.04
            description: Linux w/o tests
            ghc-ver: '9.6.1'
            # Can't leave cabal-flags empty here lest it becomes the default value.
            cabal-flags: '--disable-tests'

          # Linux, with -f cpphs
          - os: ubuntu-22.04
            description: Linux cpphs
            ghc-ver: '9.6.1'
            cabal-flags: '--enable-tests -f cpphs'

          # Linux, without -f enable-cluster-counting but with -f debug
          - os: ubuntu-22.04
            description: Linux debug
            ghc-ver: '9.6.1'
            cabal-flags: '--enable-tests -f debug'

          ## Andreas, 2023-03-15: Obsolete with GHC 9.6 which ships mtl-2.3
          # # Linux, with mtl-2.3 and everything
          # - os: ubuntu-22.04
          #   description: Linux mtl 2.3
          #   ghc-ver: '9.6.1'
          #   ## Andreas, 2022-11-23: Test mtl-2.3.1 here which has breaking changes.
          #   ## Note: -c 'mtl >= 2.3.1' with single quotes does not get communicated properly.
          #   ## (The single quotes stay, and "-c 'mtl" is an option parse error for cabal.)
          #   cabal-flags: |
          #     --enable-tests -f enable-cluster-counting -f debug -c mtl>=2.3.1

          # macOS with default flags
          - os: macos-12
            description: macOS
            ghc-ver: '9.6.1'

          # Windows with default flags
          - os: windows-2022
            description: Windows
            ghc-ver: '9.6.1'

    # Default values
    env:
      GHC_VER:   ${{ matrix.ghc-ver || '9.6.1' }}
      CABAL_VER: ${{ matrix.cabal-ver || '3.10' }}
      FLAGS:     ${{ matrix.cabal-flags || '--enable-tests -f enable-cluster-counting' }}

    steps:
    - uses: actions/checkout@v3

    - name: Switch off XDG directories for cabal (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        mkdir -p ~/.cabal
      # The presence of ~/.cabal should switch cabal 3.10 to not use the XDG layout.

    - uses: haskell/actions/setup@v2
      id: setup-haskell
      with:
        ghc-version: ${{ env.GHC_VER }}
        cabal-version: ${{ env.CABAL-VER }}

    - name: Environment settings based on the Haskell setup
      run: |
        GHC_VER=$(ghc --numeric-version)
        CABAL_VER=$(cabal --numeric-version)
        echo "GHC_VER   = ${GHC_VER}"
        echo "CABAL_VER = ${CABAL_VER}"
        echo "GHC_VER=${GHC_VER}"       >> "${GITHUB_ENV}"
        echo "CABAL_VER=${CABAL_VER}"   >> "${GITHUB_ENV}"
      # From now on, env.{GHC|CABAL}_VER are the precise versions.

    # See: https://github.com/haskell/text-icu/pull/86
    # pacman needs MSYS /usr/bin in PATH, but this breaks the latest cache action.
    # -  https://github.com/actions/cache/issues/1073
    # MSYS' pkg-config needs MSYS /mingw64/bin which we can safely add to the PATH
    #
    - name: Install the ICU library (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: |
        $env:PATH = "C:\msys64\usr\bin;$env:PATH"
        pacman --noconfirm -Sy msys2-keyring mingw-w64-x86_64-pkg-config mingw-w64-x86_64-icu
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath "$env:GITHUB_PATH" -Append

    - name: Set up pkg-config for the ICU library (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        PKG_CONFIG_PATH=$(brew --prefix)/opt/icu4c/lib/pkgconfig
        echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" >> "${GITHUB_ENV}"
        # # print some information to debug pkg-config
        # echo "$ export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}"
        # echo "$ ls -l ${PKG_CONFIG_PATH}"
        # ls -l "${PKG_CONFIG_PATH}"
        # export PKG_CONFIG_PATH
        # echo "$ pkg-config --modversion icu-i18n"
        # pkg-config --modversion icu-i18n

    - name: Determine the ICU version
      run: |
        ICU_VER=$(pkg-config --modversion icu-i18n)
        echo "ICU_VER=${ICU_VER}"
        echo "ICU_VER=${ICU_VER}" >> "${GITHUB_ENV}"

    - name: Configure the build plan
      run: |
        cabal update
        cabal configure -O0 ${FLAGS}
        cabal build --dry-run
      # cabal build --dry-run creates dist-newstyle/cache/plan.json
      # Keep a watch on this `cabal-3.9 build --dry-run` bug:
      # https://github.com/haskell/cabal/issues/8706

    - name: Restore cache from approximate key
      # uses: actions/cache/restore@v3
      # Andreas, 2023-02-02 revert to default cache saving logic.
      # "Save always" is bad because it may duplicate caches from the base branch on the feature branch.
      uses: actions/cache@v3
      id: cache
      with:
        # We don't cache dist-newstyle because it is too fat (e.g. >400MB on GHC 9.4.4)
        path: &cache_path |
          ${{ steps.setup-haskell.outputs.cabal-store }}

        # Append the build plan to the cache key so that a new cache gets saved when dependencies update.
        # `plan.json` is a good cache key because it does not contain time stamps (unlike `cabal.project.freeze`).
        key: &cache_key cabal.yml-${{ runner.os }}-ghc-${{ env.GHC_VER }}-cabal-${{ env.CABAL_VER }}-${{ hashFiles('**/plan.json') }}
        restore-keys:   cabal.yml-${{ runner.os }}-ghc-${{ env.GHC_VER }}-cabal-${{ env.CABAL_VER }}-

    - name: Install dependencies
      # Formally skip this when we successfully restored the cache, to shave a few seconds.
      # Note that the dependencies will anyway be built in the `cabal build` step.
      # So, strictly speaking, this step is superfluous anyways.
      # However, we keep it here so that we do not clutter the output of the
      # `cabal build` step too much in the ordinary case.
      if:   ${{ !steps.cache.outputs.cache-hit }}
      run: |
        cabal build --only-dependencies

    - name: Build Agda
      run: |
        cabal build

    # - name: Clear old cache
    #   if:   ${{ steps.cache.outputs.cache-hit }}
    #   env:
    #     KEY: ${{ steps.cache.outputs.cache-matched-key }}
    #     GH_TOKEN: ${{ github.token }}
    #   run: |
    #     gh extension install actions/gh-actions-cache
    #     gh actions-cache delete -B ${{ github.ref }} ${{ env.KEY }} --confirm
    #   # Don't fail if cache cannot be deleted
    #   continue-on-error: true

    # - name: Save cache
    #   uses: actions/cache/save@v3
    #   if:   always()  # save cache even when build fails
    #   with:
    #     key:  *cache_key
    #     path: *cache_path
