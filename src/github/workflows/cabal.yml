name: Build (cabal)

on:
  push:
    branches:
    - master
    - ci-*
    - release*
    paths: &trigger_path_list
    - '.github/workflows/cabal.yml'
    - 'Agda.cabal'
    - 'Setup.hs'
    - 'src/agda-mode/**'
    - 'src/full/**'
    - 'src/main/**'
    - 'test/**.hs'
  pull_request:
    paths: *trigger_path_list

defaults:
  run:
    shell: bash

jobs:
  auto-cancel:
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[ci skip]')
      && !contains(github.event.head_commit.message, '[github skip]')
      && !contains(github.event.head_commit.message, '[skip github]')
    runs-on: Ubuntu-latest # Required, but it can be anything here.

    steps:
    - uses: styfle/cancel-workflow-action@0.12.1
      with:
        access_token: ${{ github.token }}

  cabal:
    needs: auto-cancel

    timeout-minutes: 60

    # In these fields, we cannot refer to `env` (or even `runner.os`).
    # Thus, we need redundant entries in the matrix.
    name: Cabal ${{ matrix.description }}, ${{ matrix.ghc-ver }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        description: [Linux]      ## This just for pretty-printing the job name.
        ghc-ver: [9.10.1, 9.8.2, 9.6.6, 9.4.8, 9.2.8, 9.0.2, 8.10.7, 8.8.4, 8.6.5]
        cabal-flags: ['--enable-tests -f enable-cluster-counting']
        doctest: [false]
        include:
          ## Latest GHC, special builds

          # Linux, without tests but with doctest
          - os: ubuntu-24.04
            description: Linux doctest
            ghc-ver: '9.10.1'
            # Can't leave cabal-flags empty here lest it becomes the default value.
            cabal-flags: '--disable-tests'
            doctest: true

          # Linux, without -f enable-cluster-counting but with -f debug
          - os: ubuntu-24.04
            description: Linux debug
            ghc-ver: '9.10.1'
            cabal-flags: '--enable-tests -f debug'

          # Linux, with all debug options
          - os: ubuntu-24.04
            description: Linux debug all
            ghc-ver: '9.10.1'
            ## Andreas, 2024-08-16: Keeping the following outdated note for future reference:
            ## Note: -c 'containers >= 0.7' with single quotes does not get communicated properly.
            ## (The single quotes stay, and "-c 'containers" is an option parse error for cabal.)
            cabal-flags: >-
              --enable-tests -f enable-cluster-counting -f debug -f debug-serialisation -f debug-parsing

          # macOS with default flags
          - os: macos-14
            description: macOS
            ghc-ver: '9.10.1'

          # Windows with default flags
          - os: windows-2022
            description: Windows
            ghc-ver: '9.10.1'

    # Default values
    env:
      GHC_VER:   ${{ matrix.ghc-ver || '9.10.1' }}
      FLAGS:     ${{ matrix.cabal-flags || '--enable-tests -f enable-cluster-counting' }}

    steps:
    - uses: actions/checkout@v4

    - name: Switch off XDG directories for cabal (Linux)
      if: runner.os == 'Linux'
      run: |
        mkdir -p ~/.cabal
      # The presence of ~/.cabal should switch cabal 3.10 to not use the XDG layout.

    - uses: haskell-actions/setup@v2
      id: setup-haskell
      with:
        ghc-version:   ${{ env.GHC_VER }}
        cabal-version: latest
        cabal-update:  true

    # See: https://github.com/haskell/text-icu/pull/86
    # pacman needs MSYS /usr/bin in PATH, but this breaks the latest cache action.
    # -  https://github.com/actions/cache/issues/1073
    # MSYS' pkg-config needs MSYS /mingw64/bin which we can safely add to the PATH
    #
    - name: Install the ICU library (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $env:PATH = "C:\msys64\usr\bin;$env:PATH"
        pacman --noconfirm -S msys2-keyring mingw-w64-x86_64-pkgconf mingw-w64-x86_64-icu
        echo "C:\msys64\mingw64\bin" | Out-File -FilePath "$env:GITHUB_PATH" -Append

    - name: Set up pkg-config for the ICU library (macOS)
      if: runner.os == 'macOS'
      run: |
        PKG_CONFIG_PATH=$(brew --prefix)/opt/icu4c/lib/pkgconfig
        echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" >> "${GITHUB_ENV}"
        # # print some information to debug pkg-config
        # echo "$ export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}"
        # echo "$ ls -l ${PKG_CONFIG_PATH}"
        # ls -l "${PKG_CONFIG_PATH}"
        # export PKG_CONFIG_PATH
        # echo "$ pkg-config --modversion icu-i18n"
        # pkg-config --modversion icu-i18n

    - name: Determine the ICU version
      run: |
        ICU_VER=$(pkg-config --modversion icu-i18n)
        echo "ICU_VER=${ICU_VER}"
        echo "ICU_VER=${ICU_VER}" >> "${GITHUB_ENV}"

    - name: Configure the build plan
      run: |
        cabal configure -O0 ${FLAGS}
        cabal build --dry-run
      # cabal build --dry-run creates dist-newstyle/cache/plan.json
      # This does not download the dependencies, except with buggy `cabal-3.9`:
      # https://github.com/haskell/cabal/issues/8706

    - name: Restore cache from approximate key
      uses: actions/cache/restore@v4
      id: cache
      with:
        # We don't cache dist-newstyle because it is too fat (e.g. >400MB on GHC 9.4.4)
        path: &cache_path |
          ${{ steps.setup-haskell.outputs.cabal-store }}

        # Append the build plan to the cache key so that a new cache gets saved when dependencies update.
        # `plan.json` is a good cache key because it does not contain time stamps (unlike `cabal.project.freeze`).
        key: ${{ env.key }}-${{ hashFiles('**/plan.json') }}
        restore-keys: ${{ env.key }}
      env:
        key: cabal.yml-${{ runner.os }}-ghc-${{ steps.setup-haskell.outputs.ghc-version }}-cabal-${{ steps.setup-haskell.outputs.cabal-version }}

    - name: Install dependencies
      # Since we save the cache even when building failed, it may be incomplete.
      # Thus, do not skip this step:
      # if: steps.cache.outputs.cache-hit != 'true'
      run: |
        cabal build --only-dependencies

    - name: Build Agda
      run: |
        cabal build

    - name: Run doctest
      if: matrix.doctest
      run: |
        make doc-test

    # - name: Clear old cache
    #   if:   ${{ steps.cache.outputs.cache-hit == 'true' }}
    #   env:
    #     KEY: ${{ steps.cache.outputs.cache-matched-key }}
    #     GH_TOKEN: ${{ github.token }}
    #   run: |
    #     gh extension install actions/gh-actions-cache
    #     gh actions-cache delete -B ${{ github.ref }} ${{ env.KEY }} --confirm
    #   # Don't fail if cache cannot be deleted
    #   continue-on-error: true

    - name: Save cache
      uses: actions/cache/save@v4
      if:   always() && steps.cache.outputs.cache-hit != 'true'
      with:
        key:  ${{ steps.cache.outputs.cache-primary-key }}
        path: *cache_path
