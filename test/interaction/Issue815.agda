
-- Tests names of constructor arguments
-- generated by C-c C-c

module Issue815 where


module Test0 where

  -- Adapted from first example in
  -- https://github.com/agda/agda/issues/815#issue-99822993

  data List (A : Set) : Set where
    []  : List A
    _∷_ : (x : A)(xs : List A) → List A

  go : ∀ {A} → List A → List A → List A
  go xs ys = {! xs ys  !}  -- This is hole 0

  -- Expected:
  -- go [] [] = ?
  -- go [] (x ∷ xs) = ?
  -- go (x ∷ xs) [] = ?
  -- go (x ∷ xs) (x₁ ∷ xs₁) = ?

module Test1 where

  -- Adapted from second example in
  -- https://github.com/agda/agda/issues/815#issue-99822993

  data Tree (A : Set) : Set where
    node : (x : A) → Tree A
    join : (l r : Tree A) → Tree A

  go : ∀ {A} → Tree A → Tree A → Tree A
  go xs ys = {! xs ys  !}  -- This is hole 1
  -- go (node x) (node x₁) = ?
  -- go (node x) (join l r) = ?
  -- go (join l r) (node x) = ?
  -- go (join l r) (join l₁ r₁) = ?

module Test where

  -- Like test 1, but now 'join' has un-named args

  data Tree (A : Set) : Set where
    node : (x : A) → Tree A
    join : Tree A → Tree A → Tree A

  go : ∀ {A} → Tree A → Tree A → Tree A
  go xs ys = {! xs ys  !}  -- This is hole 2
  -- go (node x) (node x₁) = ?
  -- go (node x) (join ys ys₁) = ?
  -- go (join xs xs₁) (node x) = ?
  -- go (join xs xs₁) (join ys ys₁) = ?

module Test3 where

  -- Adapted from third example in
  -- https://github.com/agda/agda/issues/815#issue-99822993

  data U : Set₁ where
    _^_  : (u : U)(K : Set) → U
    _+_  : (u₁ u₂ : U) → U
  
  go : U → U → Set
  go u₁ u₂ = {! u₁ u₂  !} -- This is hole 3
  -- go (u ^ K) (u₁ ^ K₁) = ?
  -- go (u ^ K) (u₁ + u₂) = ?
  -- go (u₁ + u₂) (u ^ K) = ?
  -- go (u₁ + u₂) (u₃ + u₄) = ?

module Test4 where

  -- Adapted from recursive example in
  -- https://github.com/agda/agda/issues/5446#issue-920165112

  data Tree (A : Set) : Set where
    node : (left right : Tree A) -> Tree A

  bla : {A : Set} -> Tree A -> A
  bla x = {! x !}  -- This is hole 4
  -- bla (node left right) = ?
