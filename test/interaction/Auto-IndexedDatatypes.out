(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : Even (double zero) ?1 : Even (double (succ n)) ?2 : Vec Y zero ?3 : Vec Y (succ n) ?4 : ∥ a ∥ ?5 : ∥ a ∥ ?6 : ∥ a ∥ ?7 : ∥ a ∥ ?8 : ∥ b ∥ " nil)
((last . 1) . (agda2-goals-action '(0 1 2 3 4 5 6 7 8)))
(agda2-give-action 0 "even-0")
((last . 1) . (agda2-goals-action '(1 2 3 4 5 6 7 8)))
(agda2-give-action 1 "even-s (odd-s h0)")
((last . 1) . (agda2-goals-action '(2 3 4 5 6 7 8)))
(agda2-give-action 2 "[]")
((last . 1) . (agda2-goals-action '(3 4 5 6 7 8)))
(agda2-give-action 3 "f x ∷ map f xs")
((last . 1) . (agda2-goals-action '(4 5 6 7 8)))
(agda2-give-action 4 "x")
((last . 1) . (agda2-goals-action '(5 6 7 8)))
(agda2-give-action 5 "lookup n σ")
((last . 1) . (agda2-goals-action '(6 7 8)))
(agda2-give-action 6 "eval σ e (eval σ e₁)")
((last . 1) . (agda2-goals-action '(7 8)))
(agda2-give-action 7 "lookup x σ")
((last . 1) . (agda2-goals-action '(8)))
(agda2-give-action 8 "eval (cons x σ) e")
((last . 1) . (agda2-goals-action '()))
