(agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : Bool " nil)
((last . 1) . (agda2-goals-action '(0)))
(agda2-verbose "splitting clause: f = test context = (x : Bool) tel = (x : Bool) perm = x0 -> x0 ps = [ωru(x = VarP (PatOVar x) (DBPatVar {dbPatVarName = \"x\", dbPatVarIndex = 0}))] ")
(agda2-verbose "parseVariables: current module = Issue1842 current section = function's fvs = 0 number of locals= 0 ")
(agda2-verbose "Interaction.MakeCase.makeAbsurdClause: split clause: context = (x : Bool) tel = ps = [true] ")
(agda2-verbose "normalized patterns: [ωru(x = ConP (ConHead {conName = Issue1842.Bool.true, conInductive = inductive, conFields = []}) (ConPatternInfo {conPRecord = Just PatOSplit, conPType = Nothing, conPLazy = False}) [])] ")
(agda2-verbose "reified lhs: LHS {lhsInfo = LHSRange , lhsCore = LHSHead {lhsDefName = Issue1842.test, lhsPats = [ωru(ConP PatRange (AmbQ {unAmbQ = [Issue1842.Bool.true]}) [])]}} ")
(agda2-verbose "Interaction.MakeCase.makeAbsurdClause: split clause: context = (x : Bool) tel = ps = [false] ")
(agda2-verbose "normalized patterns: [ωru(x = ConP (ConHead {conName = Issue1842.Bool.false, conInductive = inductive, conFields = []}) (ConPatternInfo {conPRecord = Just PatOSplit, conPType = Nothing, conPLazy = False}) [])] ")
(agda2-verbose "reified lhs: LHS {lhsInfo = LHSRange , lhsCore = LHSHead {lhsDefName = Issue1842.test, lhsPats = [ωru(ConP PatRange (AmbQ {unAmbQ = [Issue1842.Bool.false]}) [])]}} ")
(agda2-verbose "split result: Clause {clauseLHS = LHS {lhsInfo = LHSRange , lhsCore = LHSHead {lhsDefName = Issue1842.test, lhsPats = [ωru(ConP PatRange (AmbQ {unAmbQ = [Issue1842.Bool.true]}) [])]}}, clauseStrippedPats = [], clauseRHS = RHS {rhsExpr = ScopedExpr (ScopeInfo {scopeCurrent = Issue1842, scopeModules = fromList [(,Scope {scopeName = , scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842,Scope {scopeName = Issue1842, scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(Bool,[AbsName {anameName = Issue1842.Bool, anameKind = DefName, anameLineage = Defined}]),(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(test,[AbsName {anameName = Issue1842.test, anameKind = DefName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [(Bool,[AbsModule {amodName = Issue1842.Bool, amodLineage = Defined}])], nsInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842.Bool,Scope {scopeName = Issue1842.Bool, scopeParents = [Issue1842,], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [], nsInScope = fromList [Issue1842.Bool.true,Issue1842.Bool.false]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Just IsData})], scopeVarsToBind = [], scopeLocals = [(x,LocalVar {localVar = x, localLetBound = False, localShadowedBy = []})], scopePrecedence = [], scopeInverseName = fromList [(Issue1842.Bool,[Bool]),(Issue1842.Bool.true,[Bool.true,true]),(Issue1842.Bool.false,[Bool.false,false]),(Issue1842.test,[test])], scopeInverseModule = fromList [(Issue1842.Bool,[Bool])], scopeInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}) (ScopedExpr (ScopeInfo {scopeCurrent = Issue1842, scopeModules = fromList [(,Scope {scopeName = , scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842,Scope {scopeName = Issue1842, scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(Bool,[AbsName {anameName = Issue1842.Bool, anameKind = DefName, anameLineage = Defined}]),(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(test,[AbsName {anameName = Issue1842.test, anameKind = DefName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [(Bool,[AbsModule {amodName = Issue1842.Bool, amodLineage = Defined}])], nsInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842.Bool,Scope {scopeName = Issue1842.Bool, scopeParents = [Issue1842,], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [], nsInScope = fromList [Issue1842.Bool.true,Issue1842.Bool.false]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Just IsData})], scopeVarsToBind = [], scopeLocals = [(x,LocalVar {localVar = x, localLetBound = False, localShadowedBy = []})], scopePrecedence = [], scopeInverseName = fromList [(Issue1842.Bool,[Bool]),(Issue1842.Bool.true,[Bool.true,true]),(Issue1842.Bool.false,[Bool.false,false]),(Issue1842.test,[test])], scopeInverseModule = fromList [(Issue1842.Bool,[Bool])], scopeInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}) (QuestionMark (MetaInfo {metaRange = Issue1842.agda:9,10-15, metaScope = ScopeInfo {scopeCurrent = Issue1842, scopeModules = fromList [(,Scope {scopeName = , scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842,Scope {scopeName = Issue1842, scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(Bool,[AbsName {anameName = Issue1842.Bool, anameKind = DefName, anameLineage = Defined}]),(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(test,[AbsName {anameName = Issue1842.test, anameKind = DefName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [(Bool,[AbsModule {amodName = Issue1842.Bool, amodLineage = Defined}])], nsInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842.Bool,Scope {scopeName = Issue1842.Bool, scopeParents = [Issue1842,], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [], nsInScope = fromList [Issue1842.Bool.true,Issue1842.Bool.false]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Just IsData})], scopeVarsToBind = [], scopeLocals = [(x,LocalVar {localVar = x, localLetBound = False, localShadowedBy = []})], scopePrecedence = [], scopeInverseName = fromList [(Issue1842.Bool,[Bool]),(Issue1842.Bool.true,[Bool.true,true]),(Issue1842.Bool.false,[Bool.false,false]),(Issue1842.test,[test])], scopeInverseModule = fromList [(Issue1842.Bool,[Bool])], scopeInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}, metaNumber = Nothing, metaNameSuggestion = \"\"}) ?0)), rhsConcrete = Just ?}, clauseWhereDecls = [], clauseCatchall = False} Clause {clauseLHS = LHS {lhsInfo = LHSRange , lhsCore = LHSHead {lhsDefName = Issue1842.test, lhsPats = [ωru(ConP PatRange (AmbQ {unAmbQ = [Issue1842.Bool.false]}) [])]}}, clauseStrippedPats = [], clauseRHS = RHS {rhsExpr = ScopedExpr (ScopeInfo {scopeCurrent = Issue1842, scopeModules = fromList [(,Scope {scopeName = , scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842,Scope {scopeName = Issue1842, scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(Bool,[AbsName {anameName = Issue1842.Bool, anameKind = DefName, anameLineage = Defined}]),(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(test,[AbsName {anameName = Issue1842.test, anameKind = DefName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [(Bool,[AbsModule {amodName = Issue1842.Bool, amodLineage = Defined}])], nsInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842.Bool,Scope {scopeName = Issue1842.Bool, scopeParents = [Issue1842,], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [], nsInScope = fromList [Issue1842.Bool.true,Issue1842.Bool.false]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Just IsData})], scopeVarsToBind = [], scopeLocals = [(x,LocalVar {localVar = x, localLetBound = False, localShadowedBy = []})], scopePrecedence = [], scopeInverseName = fromList [(Issue1842.Bool,[Bool]),(Issue1842.Bool.true,[Bool.true,true]),(Issue1842.Bool.false,[Bool.false,false]),(Issue1842.test,[test])], scopeInverseModule = fromList [(Issue1842.Bool,[Bool])], scopeInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}) (ScopedExpr (ScopeInfo {scopeCurrent = Issue1842, scopeModules = fromList [(,Scope {scopeName = , scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842,Scope {scopeName = Issue1842, scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(Bool,[AbsName {anameName = Issue1842.Bool, anameKind = DefName, anameLineage = Defined}]),(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(test,[AbsName {anameName = Issue1842.test, anameKind = DefName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [(Bool,[AbsModule {amodName = Issue1842.Bool, amodLineage = Defined}])], nsInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842.Bool,Scope {scopeName = Issue1842.Bool, scopeParents = [Issue1842,], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [], nsInScope = fromList [Issue1842.Bool.true,Issue1842.Bool.false]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Just IsData})], scopeVarsToBind = [], scopeLocals = [(x,LocalVar {localVar = x, localLetBound = False, localShadowedBy = []})], scopePrecedence = [], scopeInverseName = fromList [(Issue1842.Bool,[Bool]),(Issue1842.Bool.true,[Bool.true,true]),(Issue1842.Bool.false,[Bool.false,false]),(Issue1842.test,[test])], scopeInverseModule = fromList [(Issue1842.Bool,[Bool])], scopeInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}) (QuestionMark (MetaInfo {metaRange = Issue1842.agda:9,10-15, metaScope = ScopeInfo {scopeCurrent = Issue1842, scopeModules = fromList [(,Scope {scopeName = , scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842,Scope {scopeName = Issue1842, scopeParents = [], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(Bool,[AbsName {anameName = Issue1842.Bool, anameKind = DefName, anameLineage = Defined}]),(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(test,[AbsName {anameName = Issue1842.test, anameKind = DefName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [(Bool,[AbsModule {amodName = Issue1842.Bool, amodLineage = Defined}])], nsInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Nothing}),(Issue1842.Bool,Scope {scopeName = Issue1842.Bool, scopeParents = [Issue1842,], scopeNameSpaces = [(PrivateNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(PublicNS,NameSpace {nsNames = fromList [(false,[AbsName {anameName = Issue1842.Bool.false, anameKind = ConName, anameLineage = Defined}]),(true,[AbsName {anameName = Issue1842.Bool.true, anameKind = ConName, anameLineage = Defined}])], nsModules = fromList [], nsInScope = fromList [Issue1842.Bool.true,Issue1842.Bool.false]}),(ImportedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []}),(OnlyQualifiedNS,NameSpace {nsNames = fromList [], nsModules = fromList [], nsInScope = fromList []})], scopeImports = fromList [], scopeDatatypeModule = Just IsData})], scopeVarsToBind = [], scopeLocals = [(x,LocalVar {localVar = x, localLetBound = False, localShadowedBy = []})], scopePrecedence = [], scopeInverseName = fromList [(Issue1842.Bool,[Bool]),(Issue1842.Bool.true,[Bool.true,true]),(Issue1842.Bool.false,[Bool.false,false]),(Issue1842.test,[test])], scopeInverseModule = fromList [(Issue1842.Bool,[Bool])], scopeInScope = fromList [Issue1842.Bool,Issue1842.Bool.true,Issue1842.Bool.false,Issue1842.test]}, metaNumber = Nothing, metaNameSuggestion = \"\"}) ?0)), rhsConcrete = Just ?}, clauseWhereDecls = [], clauseCatchall = False} ")
(agda2-verbose "InteractionTop.Cmd_make_case cs = test true = ? test false = ? cs' = test true = ? test false = ? pcs = test true = ? test false = ? pcs' = test true = ? test false = ? ")
((last . 2) . (agda2-make-case-action '("test true = ?" "test false = ?")))
((last . 1) . (agda2-goals-action '(0)))
