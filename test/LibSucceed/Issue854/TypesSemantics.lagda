%include agda.fmt

\subsection{The semantics of types}
\label{types-semantics}

\AgdaHide{
\begin{code}
module Issue854.TypesSemantics where

import Level
open import Function
open import Data.Empty
open import Data.Unit
open import Data.Sum
open import Data.Product
open import Data.List
open import Data.List.Any
open import Data.Container hiding (_โ_) renaming (ฮผ to ฮผ^C; โฆ_โง to โฆ_โง^C; _โท_ to _โ_)
open import Data.Container.Combinator using () renaming (_ร_ to _ร^C_)
open import Data.Container.FreeMonad as FM
    hiding (_โ_) renaming (_โC_ to _โ^CC_)
open import Category.Monad
open import Relation.Binary.PropositionalEquality

open import Data.List.Membership.Propositional
open import Issue854.Types
open import Issue854.Context
open import Issue854.EilenbergMooreAlgebra
\end{code}
}

\begin{code}
mutual
  โฆ_โง^VType : VType โ Set
  โฆ โ C โ  โง^VType = Carrier โฆ C โง^CType
  โฆ ๐      โง^VType = โค
  โฆ U โ V  โง^VType = โฆ U โง^VType ร โฆ V โง^VType
  โฆ ๐      โง^VType = โฅ
  โฆ U โ V  โง^VType = โฆ U โง^VType โ โฆ V โง^VType
  โฆ ฮผ ฮ    โง^VType = ฮผ^C โ ฮ โ^Sig

  โ_โ^Sig : Sig โ Container _ _
  โ ฮฃ โ^Sig = Sh ฮฃ โ Pos ฮฃ

  Sh : Sig โ Set
  Sh []             = โฅ
  Sh ((P , _) โท ฮฃ)  = โฆ P โง^VType โ Sh ฮฃ

  Pos : (ฮฃ : Sig) โ Sh ฮฃ โ Set
  Pos []             ()
  Pos ((_ , A) โท ฮฃ)  (injโ p) = โฆ A โง^VType
  Pos ((_ , A) โท ฮฃ)  (injโ s) = Pos ฮฃ s

  โฃ_โฃ^Sig : CType โ Container _ _
  โฃ ฮฃ โ V  โฃ^Sig = โ ฮฃ โ^Sig
  โฃ V โ C  โฃ^Sig = โฃ C โฃ^Sig
  โฃ โคโฒ     โฃ^Sig = โ [] โ^Sig
  โฃ B & C  โฃ^Sig = โฃ B โฃ^Sig ร^C โฃ C โฃ^Sig

  โฆ_โง^CType : (C : CType) โ โฃ C โฃ^Sig -Alg
  โฆ ฮฃ โ V  โง^CType = โ-alg โฆ V โง^VType
  โฆ V โ C  โง^CType = โฆ V โง^VType โ-alg โฆ C โง^CType
  โฆ โคโฒ     โง^CType = โ-alg โค
  โฆ B & C  โง^CType = โฆ B โง^CType โ-alg โฆ C โง^CType

-- What if we wanted to add cofree comonads/free cims? The following is
-- a bit complicated, but seems to suggest that it should be possible?
mutual
  data โฃ_โฃ^Alg : CType โ Set where
    alg : โ {C} โ โฃ C โฃ^Alg

  โฃ_โฃ^Algโฒ : (C : CType) โ โฃ C โฃ^Alg
  โฃ C โฃ^Algโฒ = alg

  El^Alg : โ {C} โ โฃ C โฃ^Alg โ Setโ
  El^Alg {C} alg = โฃ C โฃ^Sig -Alg

  โฆ_โง^VTypeโฒ : VType โ Set
  โฆ โ C โ  โง^VTypeโฒ = Carrierโฒ {C}{โฃ C โฃ^Algโฒ} (โฆ C โง^CTypeโฒ {A = โฃ C โฃ^Algโฒ })
  โฆ ๐      โง^VTypeโฒ = โค
  โฆ U โ V  โง^VTypeโฒ = โฆ U โง^VType ร โฆ V โง^VType
  โฆ ๐      โง^VTypeโฒ = โฅ
  โฆ U โ V  โง^VTypeโฒ = โฆ U โง^VType โ โฆ V โง^VType
  โฆ ฮผ ฮ    โง^VTypeโฒ = ฮผ^C โ ฮ โ^Sig

  Carrierโฒ : โ {C} {A : โฃ C โฃ^Alg} โ El^Alg A โ Set
  Carrierโฒ {C} {alg} A = Carrier A

  โฆ_โง^CTypeโฒ : (C : CType) โ {A : โฃ C โฃ^Alg} โ El^Alg A
  โฆ ฮฃ โ V  โง^CTypeโฒ {alg} = โ-alg โฆ V โง^VType
  โฆ V โ C  โง^CTypeโฒ {alg} = โฆ V โง^VType โ-alg โฆ C โง^CType
  โฆ โคโฒ     โง^CTypeโฒ {alg} = โ-alg โค
  โฆ B & C  โง^CTypeโฒ {alg} = โฆ B โง^CType โ-alg โฆ C โง^CType


โฆ_โง^Ctx : Ctx โ Set
โฆ []     โง^Ctx = โค
โฆ ฮ โป V  โง^Ctx = โฆ ฮ โง^Ctx ร โฆ V โง^VType

โฆ_โง^CTypes : List CType โ Set
โฆ []      โง^CTypes = โค
โฆ C โท Cs  โง^CTypes = Carrier โฆ C โง^CType ร โฆ Cs โง^CTypes

โฆ_โง^Sig : Sig โ (Set โ Set)
โฆ ฮฃ โง^Sig = โฆ โ ฮฃ โ^Sig โง^C

sh : โ {ฮฃ P A} โ (P , A) โ ฮฃ โ โฆ P โง^VType โ Sh ฮฃ
sh (here refl)  p = injโ p
sh (there m)    p = injโ (sh m p)

ar : โ {ฮฃ P A}(m : (P , A) โ ฮฃ)(p : โฆ P โง^VType) โ Pos ฮฃ (sh m p) โ
       โฆ A โง^VType
ar (here refl)  _  a = a
ar (there m)    p  a = ar m p a
\end{code}
