Agda2> (agda2-status-action "")
(agda2-info-action "*Type-checking*" "" nil)
(agda2-highlight-clear)
(agda2-status-action "")
(agda2-info-action "*All Goals*" "?0 : StrictTotalOrder Agda.Primitive.lzero Level.0ℓ Agda.Primitive.lzero " nil)
((last . 1) . (agda2-goals-action '(0)))
Agda2> (agda2-give-action 0 "(record { Carrier = ℕ ; _≈_ = Relation.Binary.PropositionalEquality._≡_ ; _<_ = λ z → Data.Nat.Base._≤_ (ℕ.suc z) ; isStrictTotalOrder = record { isEquivalence = record { refl = λ {x} → Relation.Binary.PropositionalEquality.refl ; sym = Relation.Binary.PropositionalEquality.sym ; trans = Relation.Binary.PropositionalEquality.trans } ; trans = Data.Nat.Properties.<-trans ; compare = Data.Nat.Properties.<-cmp } })")
(agda2-status-action "")
(agda2-info-action "*All Done*" "" nil)
((last . 1) . (agda2-goals-action '()))
Agda2> 