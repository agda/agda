Tested with GHC 9.4.4 and `cabal-install 3.8.10`.

When releasing the following procedure can be followed:

* If necessary obtain and install the newest version of the standard
  library and the cubical library for the `master` branch:

    make fast-forward-std-lib
    make fast-forward-cubical

* Verify that GitHub workflows have no errors.

* First, release a release candidate (see
  notes/agda-stable-releases-candidates).

* Use the branch used for releasing the release candidate.

* Finish the release notes in the CHANGELOG.

* Run the `closed-issues-for-milestone` program for adding the list of
  closed issues to the CHANGELOG.

  The `closed-issues-for-milestone` program requires a GitHub access
  token which can be generated from the GitHub site:

  Settings ->
  Developer settings ->
  Personal access token ->
  Tokens classic ->
  Generate new token ->
  Generate new token (classic)

* Because some titles of some issues can generate new white-space
  issues after running the `closed-issues-for-milestone` program, run

    make check-whitespace

  and fix the issues both in the CHANGELOG file and GitHub.

* Update the README.md, if necessary.

* Update the list of contributors if necessary.

  Note: This is duplicated in the following locations:

  - Agda.cabal
  - doc/user-manual/conf.py
  - doc/user-manual/team.rst
  - LICENSE

* Update the LICENSE file, if necessary.

* Update Stackage resolvers, if necessary.

* Update the copyright year range in

  - Agda.cabal
  - /doc/user-manual/conf.py
  - LICENSE

* Check the date and version in `/src/data/latex/agda.sty`.

* Update in the bug tracker the milestone field of open issues to the
  next Agda version.

* We are using odd-only version numbers for final releases and
  even-only version numbers for release-candidates (see Issue
  #6445). For example,

    ** 2.6.4 is a dev version

    ** 2.6.4.date could be release candidates for next major version 2.6.5

    ** 2.6.5.0.date could be release candidates for 2.6.5.1

    ** subsequent minor releases would be 2.6.5.1, 2.6.5.3 etc

    ** next dev version would be 2.6.6 etc.

* Get a clean Agda repository.

    export MAJOR_VERSION=<current-development-version-eg-2.4.2>
    export VERSION=<current-released-version-eg-2.4.0.2>
    git clone git@github.com:agda/agda.git agda-release
    cd agda-release
    git switch master

1) Replace in CHANGELOG.md the links to Read the Docs:

    agda.readthedocs.io/en/latest -> agda.readthedocs.io/en/v$MAJOR_VERSION

2) Update the Agda version

    ./src/release-tools/change-version.bash $VERSION $MAJOR_VERSION

* Obtain and install the standard library and the cubical library for
  the release branch:

    make up-to-date-std-lib
    make up-to-date-cubical

* Run the test-suite:

    make compile-emacs-mode
    make test

  Note that "compile-emacs-mode" invokes "agda-mode compile", which should
  ensure that the Emacs mode can be compiled without errors or
  warnings (except for the "cl package required at runtime" warning).

* Test the user-manual in PDF:

    make user-manual-pdf

3) Remove the Cabal test-suite from Agda.cabal.

4) Remove -Werror from Agda.cabal (this is required by `cabal
   --check`).

5) Remove unnecessary dependencies from stack-XYZ.yaml files:

  + Remove QuickCheck dependency
  + Remove tasty-* dependencies
  + Remove the `packages` section.

* Build source distributions:

    cabal configure
    cabal check
    cabal sdist

* Build documentation for uploading to Hackage.

    cabal haddock --haddock-for-hackage

* Ensure that the package builds properly (with multiple versions of
  GHC if possible) in Linux, macOS and Windows.

    BASE=`pwd`
    cd ${TMPDIR:-/tmp}
    tar xzf $BASE/dist-newstyle/sdist/Agda-$MAJOR_VERSION.tar.gz
    cd Agda-$MAJOR_VERSION
    cabal install --program-suffix=-$MAJOR_VERSION
    agda-$MAJOR_VERSION --version
    agda-mode-$MAJOR_VERSION compile

* Tag the relase (do not forget to record the changes above first):

    cd $BASE
    git tag -a v$MAJOR_VERSION -m "Agda $MAJOR_VERSION stable release"

* Upload the tarball and the documentation to Hackage:

    cd $BASE
    cabal upload --publish dist-newstyle/sdist/Agda-$MAJOR_VERSION.tar.gz
    cabal upload --publish -d dist-newstyle/Agda-$MAJOR_VERSION-docs.tar.gz

* Revert changes made in 1), 2), 3) 4) and 5).

* Push all changes (in the release-$MAJOR_VERSION branch):

    git push --follow-tags

* New CHANGELOG (see Issue #4705):

  ** In a commit:

     *** Move the CHANGELOG for $MAJOR_VERSION to a new entry in
         doc/release-notes/<version-written-with-dashes>.md.

     *** Add doc/release-notes/<version-written-with-dashes>.md. to
         the extra-source-files field in Agda.cabal.

  ** In a different commit: Create a new CHANGELOG file.

* Update Agda Manual on Readthedocs.org (see Issues #2844 and #3035)

  ** You need Admin permissions on the Agda readthedocs.org project
     (current admins: asr, andreasabel, phile314)

  ** Go to readthedocs.org -> Agda Project -> Versions

     and mark $MAJOR_VERSION as active

  ** Go to readthedocs.org -> Agda Project -> Admin -> Advanced Settings

     and set the default documentation version to $MAJOR_VERSION

  ** If a release candidate was released then remove the associated
     documentation.

* Update the Agda Wiki:

  ** Update the Download page:

     *** Move the current version information to the old releases
         section.

     *** Update the last release information.

  ** Update the Main page.

  ** Is the current version of the standard library compatible with
     the new version of Agda? If so, to update the standard library
     page.

* If we are releasing a bux-fix release then deprecate in Hackage the
  buggy version.

* Announce the release of the new version on the Agda mailing lists
  (users and developers) and Agda Zulip.

* Enable the released version of Agda on Stackage, if necessary.

* Close in the bug tracker the milestone $MAJOR_VERSION.
